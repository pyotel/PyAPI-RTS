#!/usr/bin/env python3
"""
Standalone IEEE 13 Bus .dfx file generator

This script generates a basic .dfx file for the IEEE 13 bus system
without requiring generated RSCAD component classes.
"""

import sys
from pathlib import Path
from datetime import date

# Add to path
sys.path.insert(0, str(Path(__file__).parent.parent.parent))

# Import only the config module
import importlib.util
spec = importlib.util.spec_from_file_location("config", Path(__file__).parent / "config.py")
config = importlib.util.module_from_spec(spec)
spec.loader.exec_module(config)


def generate_dfx_content() -> str:
    """Generate the complete .dfx file content as a string."""

    lines = []

    # Header
    lines.append("DRAFT 1.2")
    lines.append("")

    # Graphics section
    lines.append("GRAPHICS: ")
    lines.append("    CANVAS_WIDTH: 4000")
    lines.append("    CANVAS_HEIGHT: 3000")
    lines.append("    CURRENT_SUBSYSTEM_IDX: 0")
    lines.append("    DEFAULT_VIEW_MODE: 3")
    lines.append("    DEFAULT_ZOOM: 100")
    lines.append("    DEFAULT_TOP_LEFT_POINT: 0,0")
    lines.append("")

    # Data section
    today = date.today()
    lines.append("DATA: ")
    lines.append("    TITLE: IEEE 13 Node Test Feeder")
    lines.append(f"    CREATED: {today.strftime('%b %d, %Y')} (PyAPI-RTS)")
    lines.append(f"    LAST-MODIFIED: {today.strftime('%b %d, %Y')} (PyAPI-RTS)")
    lines.append(f"    TIME-STEP: {50.0 / 1e6}")
    lines.append("    FINISH-TIME: 0.2")
    lines.append("    RTDS-RACK: 1")
    lines.append("    COMPILE-MODE: AUTO")
    lines.append("    DISTRIBUTION_MODE: 0")
    lines.append("    RTDS REAL-TIME: Yes")
    lines.append("")

    # Circuit comments
    lines.append("    CIRCUIT_COMMENTS: IEEE 13 Node Test Feeder")
    lines.append("    Standard benchmark distribution system")
    lines.append(f"    Generated by PyAPI-RTS on {today.strftime('%Y-%m-%d')}")
    lines.append("    ")
    lines.append("    System Specifications:")
    lines.append(f"    - Nominal Voltage: {config.NOMINAL_VOLTAGE_KV} kV")
    lines.append(f"    - Number of Nodes: {len(config.NODES)}")
    lines.append(f"    - Line Segments: {len(config.LINE_SEGMENTS)}")

    # Calculate totals
    total_kw = sum(l.ph1_kw + l.ph2_kw + l.ph3_kw for l in config.SPOT_LOADS)
    total_kw += sum(l.ph1_kw + l.ph2_kw + l.ph3_kw for l in config.DISTRIBUTED_LOADS)
    total_kvar = sum(l.ph1_kvar + l.ph2_kvar + l.ph3_kvar for l in config.SPOT_LOADS)
    total_kvar += sum(l.ph1_kvar + l.ph2_kvar + l.ph3_kvar for l in config.DISTRIBUTED_LOADS)
    total_cap = sum(c.ph_a_kvar + c.ph_b_kvar + c.ph_c_kvar for c in config.CAPACITOR_BANKS)

    lines.append(f"    - Total Load: {total_kw:.0f} kW + j{total_kvar:.0f} kVAr")
    lines.append(f"    - Total Capacitance: {total_cap:.0f} kVAr")
    lines.append("    ")
    lines.append("    Features:")
    lines.append("    - Voltage regulator (650-632)")
    lines.append("    - Substation transformer (115kV to 4.16kV)")
    lines.append("    - In-line transformer (4.16kV to 0.48kV)")
    lines.append("    - Mixed overhead/underground lines")
    lines.append("    - Unbalanced loading (PQ, I, Z models)")
    lines.append("    - Shunt capacitor banks")
    lines.append("END_CIRCUIT_COMMENTS:")
    lines.append("")

    # Component enumeration (empty for now)
    lines.append("COMPONENT_ENUMERATION_START:")
    lines.append("COMPONENT_ENUMERATION_END:")
    lines.append("")

    # Subsystem
    lines.append("SUBSYSTEM-START:")
    lines.append("SUBSYSTEM-TAB-NAME: IEEE 13 Bus System")
    lines.append("SUBSYSTEM-CANVAS-SIZE:4000,3000")
    lines.append("SUBSYSTEM-PRINT-LAYOUT:PORTRAIT")
    lines.append("SUBSYSTEM-PAPER-TYPE:LETTER")
    lines.append("SUBSYSTEM-COMPONENTS:")
    lines.append("")

    # Add component markers/comments for documentation
    lines.append("# System Topology")
    lines.append("# ================")
    lines.append("#")
    lines.append("# Source: Node 650 (115 kV)")
    lines.append("#   |")
    lines.append("#   +-- [REGULATOR] --+")
    lines.append("#   |                 |")
    lines.append("# Node 632 (Main Bus) |")
    lines.append("#   |                 |")
    lines.append("#   +-- Line (2000ft, Config 601) -- Node 671")
    lines.append("#   |                                  |")
    lines.append("#   +-- Line (500ft, Config 602) ---+  +-- Line (300ft, Config 604) -- Node 684")
    lines.append("#   |                               |  |                                  |")
    lines.append("#   +-- Line (500ft, Config 603) -- Node 633                             +-- UG Line (800ft, Config 607) -- Node 652")
    lines.append("#                                    |  |                                  |")
    lines.append("#                                    |  +-- Line (1000ft, Config 601) --- Node 680")
    lines.append("#                                    |  |")
    lines.append("#                       [XFM-1]     |  +-- [Switch] -- Node 692")
    lines.append("#                                    |                    |")
    lines.append("#                                 Node 634                +-- UG Line (500ft, Config 606) -- Node 675")
    lines.append("#                                                         |")
    lines.append("#                                 Node 645                +-- Line (300ft, Config 605) -- Node 611")
    lines.append("#                                    |")
    lines.append("#                                    +-- Line (300ft, Config 603) -- Node 646")
    lines.append("#")
    lines.append("")

    # Network data as comments
    lines.append("# NODES:")
    for node in sorted(config.NODES):
        lines.append(f"#   {node}")
    lines.append("#")

    lines.append("# LINE SEGMENTS:")
    for seg in config.LINE_SEGMENTS:
        line_config = next((cfg for cfg in config.LINE_CONFIGS if cfg.config_id == seg.config_id), None)
        if line_config:
            line_type = "UG" if line_config.is_underground else "OH"
            lines.append(f"#   {seg.node_a} -> {seg.node_b}: {seg.length_ft}ft, {line_type}, Config {seg.config_id}")
        elif seg.config_id == 0:
            if "633" in [seg.node_a, seg.node_b]:
                lines.append(f"#   {seg.node_a} -> {seg.node_b}: Transformer XFM-1")
            else:
                lines.append(f"#   {seg.node_a} -> {seg.node_b}: Switch")
    lines.append("#")

    lines.append("# SPOT LOADS:")
    for load in config.SPOT_LOADS:
        kw = load.ph1_kw + load.ph2_kw + load.ph3_kw
        kvar = load.ph1_kvar + load.ph2_kvar + load.ph3_kvar
        lines.append(f"#   Node {load.node}: {kw:.0f} kW + j{kvar:.0f} kVAr ({load.load_model})")
    lines.append("#")

    lines.append("# DISTRIBUTED LOADS:")
    for load in config.DISTRIBUTED_LOADS:
        kw = load.ph1_kw + load.ph2_kw + load.ph3_kw
        kvar = load.ph1_kvar + load.ph2_kvar + load.ph3_kvar
        lines.append(f"#   {load.node_a} -> {load.node_b}: {kw:.0f} kW + j{kvar:.0f} kVAr ({load.load_model})")
    lines.append("#")

    lines.append("# CAPACITOR BANKS:")
    for cap in config.CAPACITOR_BANKS:
        total = cap.ph_a_kvar + cap.ph_b_kvar + cap.ph_c_kvar
        lines.append(f"#   Node {cap.node}: {total:.0f} kVAr")
    lines.append("#")

    lines.append("# TRANSFORMERS:")
    for xfm in config.TRANSFORMERS:
        lines.append(f"#   {xfm.name}: {xfm.kva} kVA, {xfm.kv_high}kV -> {xfm.kv_low}kV")
    lines.append("#")

    lines.append("# VOLTAGE REGULATOR:")
    reg = config.REGULATOR
    lines.append(f"#   Location: {reg.line_segment[0]} -> {reg.line_segment[1]}")
    lines.append(f"#   Phases: {reg.phases}")
    lines.append(f"#   Voltage Level: {reg.voltage_level}")
    lines.append("#")
    lines.append("")

    # Note about component generation
    lines.append("# NOTE: This is a simplified .dfx file for documentation purposes.")
    lines.append("# To generate a complete .dfx file with all RSCAD components,")
    lines.append("# run the class generator first:")
    lines.append("#   poetry run python ./pyapi_rts/class_extractor/main.py")
    lines.append("")

    lines.append("SUBSYSTEM-END:")
    lines.append("")

    return '\n'.join(lines)


def main():
    """Generate and save the .dfx file."""
    import argparse

    parser = argparse.ArgumentParser(description="Generate IEEE 13 bus .dfx file")
    parser.add_argument(
        '--output', '-o',
        default='ieee_13_bus.dfx',
        help='Output .dfx file path'
    )

    args = parser.parse_args()

    print("=" * 70)
    print("IEEE 13 Node Test Feeder - .dfx Generator")
    print("=" * 70)
    print()

    # System summary
    print("System Configuration:")
    print(f"  Nodes: {len(config.NODES)}")
    print(f"  Line Segments: {len(config.LINE_SEGMENTS)}")
    print(f"  Spot Loads: {len(config.SPOT_LOADS)}")
    print(f"  Distributed Loads: {len(config.DISTRIBUTED_LOADS)}")
    print(f"  Capacitor Banks: {len(config.CAPACITOR_BANKS)}")
    print(f"  Transformers: {len(config.TRANSFORMERS)}")
    print()

    # Calculate totals
    total_kw = sum(l.ph1_kw + l.ph2_kw + l.ph3_kw for l in config.SPOT_LOADS)
    total_kw += sum(l.ph1_kw + l.ph2_kw + l.ph3_kw for l in config.DISTRIBUTED_LOADS)
    total_kvar = sum(l.ph1_kvar + l.ph2_kvar + l.ph3_kvar for l in config.SPOT_LOADS)
    total_kvar += sum(l.ph1_kvar + l.ph2_kvar + l.ph3_kvar for l in config.DISTRIBUTED_LOADS)
    total_cap = sum(c.ph_a_kvar + c.ph_b_kvar + c.ph_c_kvar for c in config.CAPACITOR_BANKS)

    print("System Loading:")
    print(f"  Total Load: {total_kw:.1f} kW + j{total_kvar:.1f} kVAr")
    print(f"  Total Capacitance: {total_cap:.1f} kVAr")
    print(f"  Net Reactive: {total_kvar - total_cap:.1f} kVAr")
    print()

    # Generate content
    print("Generating .dfx file content...")
    content = generate_dfx_content()

    # Write to file
    output_path = Path(args.output)
    print(f"Writing to: {output_path}")

    with open(output_path, 'w', encoding='cp1252') as f:
        f.write(content)

    print()
    print("✓ .dfx file generated successfully!")
    print()
    print(f"Output file: {output_path.absolute()}")
    print(f"File size: {output_path.stat().st_size} bytes")
    print()
    print("Note: This is a simplified .dfx file with system documentation.")
    print("For a complete RSCAD model with all components, generate the")
    print("RSCAD component classes first using the class extractor.")
    print()


if __name__ == "__main__":
    main()
